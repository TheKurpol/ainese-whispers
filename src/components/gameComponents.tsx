import { useContext, useEffect, useState } from 'react'
import { useNavigate } from '@tanstack/react-router'
import { ScrollArea } from './ui/scroll-area'
import { Button } from './ui/button'
import type { ReactNode } from 'react'
import type { ErrorMessage, PlayerLoadedPayload } from '@/routes/sharedTypes'
import { SocketContext } from '@/lib/reactUtils'

export function Waiting(): ReactNode {
  const socket = useContext(SocketContext)
  const [numPlayers, setNumPlayers] = useState(0)
  const [allPlayers, setAllPlayers] = useState(0)

  useEffect(() => {
    if (!socket) return
    function handlePlayerLoaded(payload: PlayerLoadedPayload | ErrorMessage) {
      if ('error' in payload) {
        return
      }
      setNumPlayers(payload.numLoaded)
      setAllPlayers(payload.numPlayers)
    }
    socket.emit('game_loaded', handlePlayerLoaded)
    socket.on('player_loaded', handlePlayerLoaded)
  }, [socket])

  return (
    <div>
      <p className="text-2xl font-bold">
        Waiting for all players to be connected...
      </p>
      <p className="text-lg">
        Number of players connected: {numPlayers}/{allPlayers}
      </p>
    </div>
  )
}

export function DrawingsFirstRound(): ReactNode {
  const socket = useContext(SocketContext)
  const [input, setInput] = useState('')
  const [hint, setHint] = useState('')
  const [time, setTime] = useState(0)

  useEffect(() => {
    if (!socket) return

    socket.on('ask_for_input', (callback) => {
      if (socket.id !== undefined) {
        callback(socket.id, input, hint)
      }
    })

    return () => {
      socket.off('ask_for_input')
    }
  }, [socket, input, hint])

  useEffect(() => {
    if (!socket) return
    socket.emit('ask_for_timer', (data) => {
      if ('error' in data) {
        return
      }
      setTime(data.timer)
    })
  }, [socket])

  useEffect(() => {
    if (time === 0) return
    const timer = setInterval(() => {
      setTime((prev) => {
        if (prev <= 1) {
          clearInterval(timer)
          return 0
        }
        return prev - 1
      })
    }, 1000)

    return () => {
      clearInterval(timer)
    }
  }, [time])

  return (
    <div
      className="relative flex w-full items-center justify-center"
      style={{ minHeight: '300px' }}
    >
      <div className="flex flex-col items-center justify-center gap-4">
        <p className="text-2xl font-bold">Write a sentence</p>
        <input
          type="text"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          className="w-200 rounded border-2 border-black px-4 py-1"
        />
        <p className="text-lg text-red-600">
          NOTE: Image generated by AI may be inaccurate
        </p>
        <p className="text-2xl font-bold">
          Please add a little hint for the next player. (Max 20 characters)
        </p>
        <input
          type="text"
          value={hint}
          onChange={(e) => {
            if (e.target.value.length <= 20) setHint(e.target.value)
            else {
              setHint(e.target.value.slice(0, 20))
            }
          }}
          className="w-200 rounded border-2 border-black px-4 py-1"
        />
      </div>
      <div className="absolute top-1/2 right-8 flex min-w-32 -translate-y-1/2 flex-col items-end justify-center">
        <p className="text-2xl font-extrabold text-blue-950">{time}</p>
      </div>
    </div>
  )
}

export function DrawingsRound({
  isLastRound,
}: {
  isLastRound: boolean
}): ReactNode {
  const socket = useContext(SocketContext)
  const [input, setInput] = useState('')
  const [hint, setHint] = useState('')
  const [image, setImage] = useState<string | null>(null)
  const [receivedHint, setReceivedHint] = useState('missingo')
  const [time, setTime] = useState(0)

  useEffect(() => {
    if (!socket) return

    socket.on('ask_for_input', (callback) => {
      if (socket.id !== undefined) {
        callback(socket.id, input, hint)
      }
    })

    socket.emit('ask_for_timer', (data) => {
      if ('error' in data) {
        return
      }
      setTime(data.timer)
    })

    return () => {
      socket.off('ask_for_input')
    }
  }, [socket, input, hint])

  useEffect(() => {
    if (!socket) return
    socket.emit('ask_for_image', (data) => {
      if ('error' in data) {
        return
      }
      setImage(data.image)
      setReceivedHint(data.hint)
    })
  }, [socket])

  useEffect(() => {
    if (time === 0) return
    const timer = setInterval(() => {
      setTime((prev) => {
        if (prev <= 1) {
          clearInterval(timer)
          return 0
        }
        return prev - 1
      })
    }, 1000)

    return () => {
      clearInterval(timer)
    }
  }, [time])

  return (
    <div
      className="relative flex w-full items-center justify-center"
      style={{ minHeight: '300px' }}
    >
      <div className="flex flex-col items-center justify-center gap-4">
        <p className="text-2xl font-bold">Try to describe the picture</p>
        {image && <img src={image} className="max-h-96" />}
        <p className="text-lg">Hint: {receivedHint}</p>
        <input
          type="text"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          className="w-200 rounded border-2 border-black px-4 py-1"
        />
        {!isLastRound && (
          <>
            <p className="text-lg text-red-600">
              NOTE: Image generated by AI may be inaccurate
            </p>
            <p className="text-2xl font-bold">
              Please add a little hint for the next player. (Max 20 characters)
            </p>
            <input
              type="text"
              value={hint}
              onChange={(e) => {
                if (e.target.value.length <= 20) setHint(e.target.value)
                else {
                  setHint(e.target.value.slice(0, 20))
                }
              }}
              className="w-200 rounded border-2 border-black px-4 py-1"
            />
          </>
        )}
      </div>
      <div className="absolute top-1/2 right-8 flex min-w-32 -translate-y-1/2 flex-col items-end justify-center">
        <p className="text-2xl font-extrabold text-blue-950">{time}</p>
      </div>
    </div>
  )
}

export function DrawingsSummary(): ReactNode {
  const socket = useContext(SocketContext)
  const [story, setStory] = useState<Array<Array<string>>>([])
  const [index, setIndex] = useState(0)
  const navigate = useNavigate()

  useEffect(() => {
    if (!socket) return

    socket.emit('ask_for_story', (data) => {
      if ('error' in data) {
        return
      }
      setStory(data)
    })

    return () => {}
  }, [socket])

  function leaveGame() {
    if (!socket) return
    socket.emit('leave_game')
    navigate({ to: '/' })
  }

  return (
    <div>
      <div className="mb-4 flex justify-center">
        <h2 className="justify-center text-2xl font-bold">Game Summary</h2>
      </div>
      <ScrollArea className="h-128 w-96 border p-4">
        {Array.isArray(story[index]) &&
          story[index].map((item, idx) => (
            <div
              key={idx}
              className="mb-8 flex flex-col items-center border-b border-gray-300 pb-4"
            >
              {idx % 2 === 0 ? (
                <p className="mb-4 text-lg font-bold text-gray-500">{item}</p>
              ) : (
                <img
                  src={item}
                  alt={`Player's drawing`}
                  className="mb-4 max-h-96"
                />
              )}
            </div>
          ))}
      </ScrollArea>
      <div className="mt-4 flex justify-center gap-6">
        <Button
          className="h-12 w-40"
          onClick={() => setIndex((prev) => Math.max(prev - 1, 0))}
          disabled={index === 0}
        >
          Previous
        </Button>
        <Button
          className="h-12 w-40"
          onClick={() =>
            setIndex((prev) => Math.min(prev + 1, story.length - 1))
          }
          disabled={index === story.length - 1}
        >
          Next
        </Button>
      </div>
      <div className="mt-4 flex justify-center">
        <Button className="h-12 w-48" onClick={leaveGame}>
          End game
        </Button>
      </div>
    </div>
  )
}

export function WaitingForNextRound({
  message,
}: {
  message: string
}): ReactNode {
  return (
    <div>
      <p className="text-2xl font-bold">{message}</p>
    </div>
  )
}
