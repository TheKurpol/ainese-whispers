import { useContext, useEffect, useState } from 'react'
import type { ReactNode } from 'react'
import type { ErrorMessage, PlayerLoadedPayload } from '@/routes/sharedTypes'
import { SocketContext } from '@/lib/reactUtils'

export function Waiting(): ReactNode {
  const socket = useContext(SocketContext)
  const [numPlayers, setNumPlayers] = useState(0)
  const [allPlayers, setAllPlayers] = useState(0)

  useEffect(() => {
    if (!socket) return
    function handlePlayerLoaded(payload: PlayerLoadedPayload | ErrorMessage) {
      if ('error' in payload) {
        return
      }
      setNumPlayers(payload.numLoaded)
      setAllPlayers(payload.numPlayers)
    }
    socket.emit('game_loaded', handlePlayerLoaded)
    socket.on('player_loaded', handlePlayerLoaded)
  }, [socket])

  return (
    <div>
      <p className="text-2xl font-bold">
        Waiting for all players to be connected...
      </p>
      <p className="text-lg">
        Number of players connected: {numPlayers}/{allPlayers}
      </p>
    </div>
  )
}

export function DrawingsFirstRound(): ReactNode {
  // TODO: make player able to select the 3 most important words from the sentence
  const socket = useContext(SocketContext)
  const [input, setInput] = useState('')
  const [hint, setHint] = useState('')

  useEffect(() => {
    if (!socket) return

    socket.on('ask_for_input', (callback) => {
      if (socket.id !== undefined) {
        callback(socket.id, input, hint)
      }
    })

    return () => {
      socket.off('ask_for_input')
    }
  }, [socket, input])

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-2xl font-bold">Write a sentence</p>
      <input
        type="text"
        value={input}
        onChange={(e) => setInput(e.target.value)}
        className="w-200 rounded border-2 border-black px-4 py-1"
      />
      <p className="text-lg text-red-600">
        NOTE: Image generated by AI my be inaccurate
      </p>
      <p className="text-2xl font-bold">
        Please add a little hint for the next player.
      </p>
      <input
        type="text"
        value={hint}
        onChange={(e) => setHint(e.target.value)}
        className="w-200 rounded border-2 border-black px-4 py-1"
      />
    </div>
  )
}

export function DrawingsRound({
  isLastRound,
}: {
  isLastRound: boolean
}): ReactNode {
  const socket = useContext(SocketContext)
  const [input, setInput] = useState('')
  const [hint, setHint] = useState('')

  useEffect(() => {
    if (!socket) return

    socket.on('ask_for_input', (callback) => {
      if (socket.id !== undefined) {
        callback(socket.id, input, hint)
      }
    })

    return () => {
      socket.off('ask_for_input')
    }
  }, [socket, input])

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-2xl font-bold">Try to describe the picture</p>
      <input
        type="text"
        value={input}
        onChange={(e) => setInput(e.target.value)}
        className="w-200 rounded border-2 border-black px-4 py-1"
      />
      {!isLastRound && (
        <>
          <p className="text-lg text-red-600">
            NOTE: Image generated by AI my be inaccurate
          </p>
          <p className="text-2xl font-bold">
            Please add a little hint for the next player.
          </p>
          <input
            type="text"
            value={hint}
            onChange={(e) => setHint(e.target.value)}
            className="w-200 rounded border-2 border-black px-4 py-1"
          />
        </>
      )}
    </div>
  )
}

export function DrawingsSummary(): ReactNode {
  const socket = useContext(SocketContext)

  useEffect(() => {
    if (!socket) return

    return () => {}
  }, [socket])

  return (
    <div>
      <h2>Game Summary</h2>
      <p>Lalala</p>
      {/* Render the summary information here */}
    </div>
  )
}

export function WaitingForNextRound({
  message,
}: {
  message: string
}): ReactNode {
  return (
    <div>
      <p className="text-2xl font-bold">{message}</p>
    </div>
  )
}
